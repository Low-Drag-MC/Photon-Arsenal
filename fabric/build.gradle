plugins {
    alias(libs.plugins.shadow)
}

String getConfig(String key) {
    return project.getParent().properties.get(key)
}

def mod_id = getConfig("mod_id")
def common_project = project(":${mod_id}-common")
def version = getConfig("version")
def mod_license = getConfig("mod_license")
def mod_name = getConfig("mod_name")
def mod_description = getConfig("mod_description")
def mod_url = getConfig("mod_url")

architectury {
    platformSetupLoomIde()
    fabric()
}

static def isJetBrainsRuntime() {
    return System.getProperty('java.vm.vendor').contains('JetBrains')
}

loom {
    accessWidenerPath = common_project.file("src/main/resources/${mod_id}.accesswidener")

    runs {
        create("dataCommon") {
            inherit client
            name("Minecraft Data")
            property("fabric-api.datagen")
            property("fabric-api.datagen.modid", "${mod_id}")
            property("fabric-api.datagen.output-dir", project.file("src/generated/resources").absolutePath)
            property("fabric-api.datagen.strict-validation")
        }
        client {
            programArgs("--username", "Player")
        }
    }

    if (isJetBrainsRuntime()) {
        runs {
            client {
                vmArgs '-XX:+AllowEnhancedClassRedefinition'
                vmArgs '-XX:HotswapAgent=fatjar'
            }
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/generated/resources")
            exclude("**/.cache")
//            srcDirs += [
//                    forge_project.file("src/generated/resources").absolutePath
//            ]
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}


repositories {
    // mavens for Fabric-exclusives
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create Fabric, Porting Lib, Forge Tags, Milk Lib, Registrate Fabric
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

dependencies {
    modImplementation fabric.fabricLoader
    modImplementation fabric.fabricApi

    common(project(path: ":${mod_id}-common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":${mod_id}-common", configuration: "transformProductionFabric")) { transitive = false }

    // LDLib
    modImplementation(fabric.ldlib.fabric) { transitive = false }
    modImplementation(fabric.photon.fabric) { transitive = false }
    modImplementation(fabric.geckolib.fabric)
    include(fabric.photon.fabric)

    // Registrate
    modImplementation(fabric.registrate)
    include(fabric.registrate)

    // Iris
    modImplementation(fabric.sodium) { transitive = false }
    modImplementation(fabric.iris) { transitive = false }
    implementation 'org.anarres:jcpp:1.4.14'
    implementation 'io.github.douira:glsl-transformer:2.0.0-pre13'
}

processResources {
    // set up properties for filling into metadata
    Map<String, String> properties = Map.of(
            "version", version,
            "mod_id", mod_id,
            "fabric_loader_version", fabric.versions.fabricLoader.get(),
            "fabric_api_version", fabric.versions.fabricApi.get(),
            "minecraft_version", libs.versions.minecraft.get(),
            "mod_license", mod_license,
            "mod_name", mod_name,
            "mod_description", mod_description,
            "mod_url", mod_url
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = common_project.sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASS")
            }
        }
    }
}
