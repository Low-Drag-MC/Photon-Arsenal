architectury {
    common(rootProject.enabled_platforms.split(","))
}

String getConfig(String key) {
    return project.getParent().properties.get(key)
}

def mod_id = getConfig("mod_id")

loom {
    accessWidenerPath = file("src/main/resources/${mod_id}.accesswidener")
}

repositories {
    // mavens for Create Fabric and dependencies
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
}

configurations {
//    snapshotModImplementation.extendsFrom modImplementation
//    snapshotModImplementation {
//        resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//    }
}

//configurations.all {
//    resolutionStrategy.cacheChangingModulesFor(0, "seconds")
//    resolutionStrategy.cacheDynamicVersionsFor(0, "seconds")
//}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation fabric.fabricLoader
    modCompileOnly fabric.fabricApi

    // libs
    modCompileOnly fabric.ldlib.common
    modCompileOnly fabric.photon.common
    modCompileOnly fabric.geckolib.fabric

    // Registrate
    modCompileOnly fabric.registrate

    // Iris
    modCompileOnly(fabric.sodium) { transitive = false }
    modCompileOnly(fabric.iris) { transitive = false }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        maven {
            url "https://maven.firstdarkdev.xyz/snapshots"
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASS")
            }
        }
    }
}
